@page "/users"
@using GameOria.Domain
@using GameOria.Domain.Enums
@using GameOria.Domains.Entities.Identity
@inject HttpClient Http

<h3 class="mb-4">👤 Users Management</h3>

<div class="mb-3 d-flex justify-content-between">
    <input type="text" class="form-control w-25" placeholder="Search Users..." @bind="searchTerm" />
    <button class="btn btn-primary">+ Add New User</button>
</div>

<table class="table table-hover align-middle shadow-sm rounded-2">
    <thead class="table-light">
        <tr>
            <th>ID</th>
            <th>Full Name</th>
            <th>Username</th>
            <th>Email</th>
            <th>Role</th>
            <th>Active</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in filteredUsers)
        {
            <tr>
                <td>@user.ID</td>
                <td>@user.FullName</td>
                <td>@user.UserName</td>
                <td>@user.EmailAddress</td>
                <td>@user.Role</td>
                <td>
                    <input type="checkbox" checked="@user.IsActive" @onchange="() => ToggleActive(user)" />
                </td>
                <td>
                    <button class="btn btn-sm btn-info me-2">Edit</button>
                    <button class="btn btn-sm btn-danger">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private string searchTerm = "";
    private List<ApplicationUser> users = new();  // Replace with API call
    private IEnumerable<ApplicationUser> filteredUsers => users
        .Where(u => string.IsNullOrWhiteSpace(searchTerm) ||
                    u.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    u.UserName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        // Mock data for now, later replace with API call
        users = new List<ApplicationUser>
        {
            new ApplicationUser { ID = Guid.NewGuid(), FullName="John Doe", UserName="johndoe", EmailAddress="john@example.com",  IsActive=true},
            new ApplicationUser { ID = Guid.NewGuid(), FullName="Jane Smith", UserName="janesmith", EmailAddress="jane@example.com",  IsActive=false},
        };
    }

    private void ToggleActive(ApplicationUser user)
    {
        user.IsActive = !user.IsActive;
        // Later: call API to update
    }
}
